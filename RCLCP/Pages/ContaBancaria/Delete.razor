@page "/contasbancarias/delete"

<PageTitle>Excluir</PageTitle>

<h1>Excluir Conta Bancaria</h1>

<h3>Tem certeza que deseja excluir?</h3>
<div>

    <hr />
    @if (contaBancaria is null)
    {
            <p><em>Carregando...</em></p>
    }
    else
    {
        <EditForm method="post" Model="contaBancaria" OnValidSubmit="DeleteContaBancaria" FormNome="delete" Enhance>
            <MudCard>
                <MudCardContent>
                    <MudText>Nome: @contaBancaria.Nome</MudText>
                    <MudText>Ativo: @(@contaBancaria.Ativo == true ? "Sim"  : "Não")</MudText>

                </MudCardContent>
                <MudCardActions>
                    <MudButton HRef="@($"/contasbancarias/edit?id={contaBancaria.ContaBancariaId}")" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary">Editar</MudButton>
                    <MudSpacer/>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary">Excluir</MudButton>
                    <MudSpacer />
                    <MudButton ButtonType="ButtonType.Button" OnClick="NavigateToIndexContaBancaria" Variant="Variant.Outlined" Color="Color.Secondary" Class="ml-auto">Retornar</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</div>

@code {

    private ContaBancaria? contaBancaria = new();

    [SupplyParameterFromQuery]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        contaBancaria = await contaBancariaRepositorio.GetContaBancariaAsync(id);

        if (contaBancaria is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteContaBancaria()
    {
        await contaBancariaRepositorio.DeleteContaBancariaAsync(contaBancaria);
        NavigationManager.NavigateTo("/contasbancarias");
    }

    public void NavigateToIndexContaBancaria()
    {
        NavigationManager.NavigateTo("/contasbancarias");
    }
}
