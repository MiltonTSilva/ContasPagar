@page "/contasbancarias"

<PageTitle>Lista de Contas Bancarias</PageTitle>

<MudPaper Class="d-flex flex-column flex-grow-1 gap-4 align-center justify-center" Elevation="0">
    <MudText Typo="Typo.h5" Color="Color.Info" Class="text-justify">
        <MudIcon Icon="@Icons.Material.Outlined.AccountBalance" />
        Lista de Contas Bancarias
    </MudText>
    <MudSpacer/>
    <MudLink href="contasbancarias/create" Typo="Typo.h6"  Underline="Underline.None">
        <MudIcon Icon="@Icons.Material.Outlined.Add" />
        Nova Conta Bancaria
    </MudLink>
    <MudSpacer />
</MudPaper>

@if(platformService == "Windows")
{
        <div class="d-flex flex-wrap align-center justify-center">
            @* <MudSwitch @bind-Checked="@_hover" Color="Color.Primary">Pairar</MudSwitch> Hover="@_hover" *@
            <MudSwitch @bind-Value = "@_dense" Color="Color.Secondary">Denso</MudSwitch>
            <MudSwitch @bind-Value = "@_striped" Color="Color.Info">Listrado</MudSwitch>
            <MudSwitch @bind-Value = "@_bordered" Color="Color.Warning">Borda</MudSwitch>
        </div>
}

<MudDataGrid    T="ContaBancaria" @ref="@_grid" Items="@Elements"
                CurrentPage="@_currentPage"
                MultiSelection="true" 
                ColumnResizeMode="ResizeMode.Column"
                SortMode="SortMode.Multiple" 
                Filterable="true" 
                QuickFilter="@_quickFilter" 
                Groupable="false"
                Dense="@_dense" 
                Striped="@_striped" 
                Bordered="@_bordered" 
                Hideable="true" 
                RowClick="@RowClicked" 
                RowContextMenuClick="RowRightClicked" 
                SelectedItemsChanged="@SelectedItemsChanged">
      <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Procurar" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent> 
    <Columns>
        @* <SelectColumn T="ContaBancaria"  /> *@
        @* <PropertyColumn Property="x => x.ContaBancariaId" Title="Id" Sortable="false" Filterable="false" /> *@
      
        <PropertyColumn StickyRight="true" Property="x => x.Nome" SortBy="@_sortBy"  />
        <PropertyColumn StickyRight="true" Property='x => (x.Ativo == true ? "Sim"  : "Não")' Title="Ativo" Sortable="true" />

        <TemplateColumn StickyRight="true" Filterable="false" Sortable="false" title="Ações" CellStyle=" text-align:center; background-color:lavender; color: black">
            <CellTemplate >
                <MudIconButton Title="Editar" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small"  @onclick="(() => Editar(context.Item.ContaBancariaId))"  />
                <MudIconButton Title="Excluir" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" @onclick="(() => Delete(context.Item.ContaBancariaId))" />
                <MudIconButton Title="Detalhes" Icon="@Icons.Material.Outlined.Contacts" Size="@Size.Small" @onclick="(() => Details(context.Item.ContaBancariaId))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        @* <MudText>Registros por página</MudText> *@
        <MudPagination ShowFirstButton="true" ShowLastButton="true" ShowNextButton="false" ShowPreviousButton="false" SelectedChanged="PageChanged" Count="@((_grid.GetFilteredItemsCount() + _grid.RowsPerPage - 1) / _grid.RowsPerPage)" Class="pa-4" />
        @* <MudDataGridPager T="ContaBancaria" Style="color: red;font-size: 8px" RowsPerPageString="RP" DisableRowsPerPage="false" /> *@
    </PagerContent>

</MudDataGrid>


@code {
    string platformService = string.Empty;
    string erro = string.Empty;

    private MudDataGrid<ContaBancaria>? _grid;
    private int _currentPage = 0;

    // private bool _hover;
    private bool _dense;
    private bool _striped;
    private bool _bordered;

    IEnumerable<ContaBancaria>? Elements ;
    private string? _searchString;
    private bool _sortNameByLength = false;
    private List<string> _events = new();


    private void Editar(int id)
    {
        NavigationManager.NavigateTo($"/contasbancarias/edit?id={id}");
    }

    private void Delete(int id)
    {
        NavigationManager.NavigateTo($"/contasbancarias/delete?id={id}");
    }

    private void Details(int id)
    {
        NavigationManager.NavigateTo($"/contasbancarias/details?id={id}");
    }

   
    private void PageChanged(int i)
    {
        _currentPage = i - 1;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            await Task.Delay(300);

            platformService = PlatformService.GetPlatform();

            var list = await contaBancariaRepositorio.GetContasBancariasAsync();
            var queryable = list.AsEnumerable();

            Elements = queryable;
        }
        catch (Exception e)
        {

            erro = e.Message;
        }
    }

    //custom sort by name length
    private Func<ContaBancaria, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Nome.Length;
        else
            return x.Nome;
    };

    // quick filter - filter globally across multiple columns with the same input
    private Func<ContaBancaria, bool> _quickFilter => x =>
       {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;


        if (x.Nome.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
       };

    // events
    void RowClicked(DataGridRowClickEventArgs<ContaBancaria> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<ContaBancaria> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<ContaBancaria> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {JsonSerializer.Serialize(items)}");
    }

}