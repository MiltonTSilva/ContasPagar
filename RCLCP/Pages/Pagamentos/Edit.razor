@page "/pagamentos/edit"

<PageTitle>Atualizar Pagamento</PageTitle>

<h1>Atualizar Pagamento</h1>

<hr />
@if (pagamento is null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <EditForm Model="pagamento" OnValidSubmit="UpdatePagamento">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@
        <MudCard>
            <MudCardContent>
                <MudField Label="Data de Pagamento" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog"  DisplayMonths="2"
                                   TitleDateFormat="dddd, dd MMMM" @bind-Date="pagamento.DataPagamento" Required="true" PickerClosed="SelecaoPorPeriodo" />
                    <ValidationMessage For="() => pagamento.DataPagamento" RequiredError="Data de pagamento é obrigatório." />
                </MudField>

                <MudField Label="Pagante" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudSelect T="int" @bind-Value="pagamento.UsuarioPaganteId" Placeholder="Selecione um pagante" Immediate="true" Required="true">
                        <MudSelectItem T="int" Value="0">Selecione Opção</MudSelectItem>
                        @foreach (var usuario in lstUsuariosPagantes)
                        {
                            <MudSelectItem T="int" Value="usuario.UsuarioId">@usuario.Nome</MudSelectItem>
                        }
                    </MudSelect>
                    <ValidationMessage For="() => pagamento.UsuarioPaganteId" RequiredError="Pagante é obrigatório." />
                </MudField>

                <MudField Label="Despesa" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudSelect T="int" @bind-Value="pagamento.DespesaId"  Placeholder="Selecione uma despesa" Immediate="true" Required="true">
                        <MudSelectItem T="int" Value="0" Variant="Variant.Outlined">Selecione Opção</MudSelectItem>
                        @foreach (var despesa in lstDespesas)
                        {
                            <MudSelectItem T="int" Value="despesa.DespesaId">@despesa.Nome</MudSelectItem>
                        }
                    </MudSelect>
                    <ValidationMessage For="() => pagamento.DespesaId" RequiredError="A despesa é obrigatória." />
                </MudField>

                <MudNumericField @bind-Value="pagamento.ValorPagar" Label="Valor a pagar" Immediate="false" Format="N2" Culture="@_ptBr" Variant="Variant.Outlined" Required="true" />
                <ValidationMessage For="() => pagamento.ValorPagar" RequiredError="O Valor a pagar é obrigatório." />

                <MudNumericField @bind-Value="pagamento.ValorPago" Label="Valor Pago" Immediate="false" Format="N2" Culture="@_ptBr" Variant="Variant.Outlined" />

                <MudField label="Débito Automático?" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudRadioGroup @bind-Value="pagamento.DebitoAutomatico">
                        <MudRadio Value="true" Color="Color.Primary" Dense="false">Sim</MudRadio>
                        <MudRadio Value="false" Color="Color.Secondary" Dense="true">Não</MudRadio>
                    </MudRadioGroup>
                </MudField>

                <MudField Label="Conta paga?" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudRadioGroup @bind-Value="pagamento.EstaPago">
                        <MudRadio Value="true" Color="Color.Primary" Dense="false">Sim</MudRadio>
                        <MudRadio Value="false" Color="Color.Secondary" Dense="true">Não</MudRadio>
                    </MudRadioGroup>
                </MudField>

               
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Salvar</MudButton>
                <MudButton ButtonType="ButtonType.Button" OnClick="NavigateToIndexPagamento" Variant="Variant.Outlined" Color="Color.Secondary" Class="ml-auto">Retornar</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}

@code {

    public CultureInfo _ptBr = CultureInfo.GetCultureInfo("pt-BR");

    private List<Usuario> lstUsuariosPagantes = [];
    private List<Despesa> lstDespesas = [];


    [SupplyParameterFromQuery]
    public int id { get; set; }

    [SupplyParameterFromForm]
    public Pagamento? pagamento { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUsuariosPagantes();
        await GetDespesas();

        if (!await PagamentoExists(id))
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void SelecaoPorPeriodo()
    {
        if (pagamento?.DataPagamento < DateTime.Today)
        {
            pagamento.DataPagamento = DateTime.Today.AddDays(1);
        }
    }

    private async Task GetUsuariosPagantes()
    {
        lstUsuariosPagantes = await usuarioRepositorio.GetUsuariosAsync();
    }

    public async Task GetDespesas()
    {
        lstDespesas = await despesaRepositorio.GetDespesasAsync();
    }

    public async Task UpdatePagamento()
    {

        try
        {
            if (pagamento!.EstaPago == true && pagamento.ValorPago == 0) pagamento.ValorPago = pagamento.ValorPagar;
            await pagamentoRepositorio.UpdatePagamentoAsync(pagamento);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            if (await PagamentoExists(id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/pagamentos");
    }

    private async Task<bool> PagamentoExists(int id)
    {
        pagamento ??= await pagamentoRepositorio.GetPagamentoAsync(id);

        if (pagamento is null)
        {
            NavigationManager.NavigateTo("notfound");
           
        }
        return true;
    }

    public void NavigateToIndexPagamento()
    {
        NavigationManager.NavigateTo("/pagamentos");
    }
}