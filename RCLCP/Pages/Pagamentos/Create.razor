@page "/pagamentos/create"

<PageTitle>Novo Pagamento</PageTitle>

<h1>Novo Pagamento</h1>

<hr />

<EditForm Model="pagamento" OnValidSubmit="AddPagamento">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@
    <MudCard>
        <MudCardContent>

            <MudField Label="Data da despesa" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                <MudDatePicker PickerVariant="PickerVariant.Dialog" DisplayMonths="2"
                               TitleDateFormat="dddd, dd MMMM" @bind-Date="pagamento.DataDespesa" Required="true" PickerClosed="SelecaoPorPeriodo" />
                <ValidationMessage For="() => pagamento.DataDespesa" RequiredError="Data da despesa é obrigatório." />
            </MudField>

            <MudField Label="Data de Pagamento" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                <MudDatePicker PickerVariant="PickerVariant.Dialog" DisplayMonths="2"
                               TitleDateFormat="dddd, dd MMMM" @bind-Date="pagamento.DataPagamento" Required="true" PickerClosed="SelecaoPorPeriodo" />
                <ValidationMessage For="() => pagamento.DataPagamento" RequiredError="Data de pagamento é obrigatório." />
            </MudField>

            <MudField Label="Pagante" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                <MudSelect T="int" @bind-Value="pagamento.UsuarioPaganteId" Placeholder="Selecione um pagante" Immediate="true" Required="true">
                    <MudSelectItem T="int" Value="0">Selecione</MudSelectItem>
                    @foreach (var usuario in lstUsuariosPagantes)
                    {
                        <MudSelectItem T="int" Value="usuario.UsuarioId">@usuario.Nome</MudSelectItem>
                    }
                </MudSelect>
                <ValidationMessage For="() => pagamento.UsuarioPaganteId" RequiredError="Pagante é obrigatório." />
            </MudField>

            <MudField Label="Despesa" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                <MudSelect T="int" @bind-Value="pagamento.DespesaId" Placeholder="Selecione uma despesa" Immediate="true" Required="true">
                    <MudSelectItem T="int" Value="0" Variant="Variant.Outlined">Selecione</MudSelectItem>
                    @foreach (var despesa in lstDespesas)
                    {
                        <MudSelectItem T="int" Value="despesa.DespesaId">@despesa.Nome</MudSelectItem>
                    }
                </MudSelect>
                <ValidationMessage For="() => pagamento.DespesaId" RequiredError="A despesa é obrigatória." />
            </MudField>
            
            <MudNumericField @bind-Value="pagamento.ValorPagar" Label="Valor a pagar" Immediate="false" Format="N2" Culture="@_ptBr" Variant="Variant.Outlined" Required="true" />
            <ValidationMessage For="() => pagamento.ValorPagar" RequiredError="O Valor a pagar é obrigatório." />

            <MudField Variant="Variant.Outlined" InnerPadding="true" DisableUnderLine="true">
                <MudField label="Pagamento Recorrente" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudRadioGroup @bind-Value="isPagamentoRecorrente">
                        <MudRadio Value="true" Color="Color.Primary" Dense="false">Sim</MudRadio>
                        <MudRadio Value="false" Color="Color.Secondary" Dense="true">Não</MudRadio>
                    </MudRadioGroup>
                </MudField>

                @if (isPagamentoRecorrente)
                {
                    <MudNumericField @bind-Value="quantidadeRecorrencia" Label="Quantidades de Ocorrencia" Immediate="false"  Required="true" />
                }
            </MudField>

            <MudField label="Tipo de Pagamento" Variant="Variant.Outlined" InnerPadding="true" DisableUnderLine="true">
                <MudSelect T="TipoPagamento" @bind-Value="pagamento.TipoPagamento" Placeholder="Selecione um Tipo de Pagamento" Immediate="true" Required="true">
                    @foreach (TipoPagamento tipoPagamento in Enum.GetValues(typeof(TipoPagamento)))
                    {
                        <MudSelectItem T="TipoPagamento" Value="@tipoPagamento">@Enum.GetName(@tipoPagamento)</MudSelectItem>
                    }
                </MudSelect>
                <ValidationMessage For="() => pagamento.DespesaId" RequiredError="A despesa é obrigatória." />
            </MudField>

            @if(@pagamento.TipoPagamento == @TipoPagamento.Débito)
            {
                <MudField label="Débito Automático?" Variant="Variant.Outlined" InnerPadding="false" DisableUnderLine="true">
                    <MudRadioGroup @bind-Value="pagamento.DebitoAutomatico">
                        <MudRadio Value="true" Color="Color.Primary" Dense="false">Sim</MudRadio>
                        <MudRadio Value="false" Color="Color.Secondary" Dense="true">Não</MudRadio>
                    </MudRadioGroup>
                </MudField>
            }

        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >Salvar</MudButton>
            <MudButton  ButtonType="ButtonType.Button" OnClick="NavigateToIndexPagamento" Variant="Variant.Outlined" Color="Color.Secondary" Class="ml-auto">Retornar</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {

    private Pagamento pagamento = new Pagamento();

    private List<Usuario> lstUsuariosPagantes = [];

    private List<Despesa> lstDespesas = [];

    public CultureInfo _ptBr = CultureInfo.GetCultureInfo("pt-BR");

    private bool isPagamentoRecorrente = false;

    private int quantidadeRecorrencia = 1;

    public DateTime? newDate { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await GetUsuariosPagantes();
        pagamento.UsuarioPaganteId = 0;

        await GetDespesas();
        pagamento.DespesaId = 0;
    }

    private async Task GetDespesas()
    {
        lstDespesas = await despesaRepositorio.GetDespesasAsync();
    }

    private async Task GetUsuariosPagantes()
    {
        lstUsuariosPagantes = await usuarioRepositorio.GetUsuariosAsync();
    }


    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddPagamento()
    {

        var contexto = new ValidationContext(pagamento, null, null);
        var resultados = new List<ValidationResult>();

        bool isValid = Validator.TryValidateObject(pagamento, contexto, resultados, true);

        if (pagamento.DespesaId <= 0 || pagamento.UsuarioPaganteId <= 0)
        {
            isValid = false;
        }

        if (isValid)
        {
            await pagamentoRepositorio.AddPagamentoAsync(pagamento);

            if (isPagamentoRecorrente)
            {
                
                for (int i = 2; i <= quantidadeRecorrencia; i++)
                {                                    
                    newDate = pagamento.DataPagamento!.Value.AddMonths(1);

                    pagamento.DataPagamento = newDate;

                    await pagamentoRepositorio.AddPagamentoAsync(pagamento);
                }
            }           
        }

        NavigationManager.NavigateTo("/pagamentos");
  
    }

    private void SelecaoPorPeriodo()
    {
        if (pagamento.DataPagamento < DateTime.Today)
        {
            pagamento.DataPagamento = DateTime.Today.AddDays(1);
        }
    }

    public void  NavigateToIndexPagamento()
    {
        NavigationManager.NavigateTo("/pagamentos");
    }

}
